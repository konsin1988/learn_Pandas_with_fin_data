import pandas as pd 
import numpy as np


df_values = [[2000, '-9.03%', '16.66%', '9.28%', '-5.44%'],
             [2001, '-11.85%', '5.57%', '6.67%', '0.75%'],
             [2002, '-21.97%', '15.12%', '9.56%', '25.57%'],
             [2003, '28.36%', '0.38%', '9.82%', '19.89%'],
             [2004, '10.74%', '4.49%', '13.64%', '4.65%'],
             [2005, '4.83%', '2.87%', '13.51%', '17.77%'],
             [2006, '15.61%', '1.96%', '1.73%', '23.2%'],
             [2007, '5.48%', '10.21%', '-5.4%', '31.92%'],
             [2008, '-36.55%', '20.1%', '-12.0%', '4.32%'],
             [2009, '25.94%', '-11.12%', '-3.85%', '25.04%'],
             [2010, '14.82%', '8.46%', '-4.12%', '29.24%'],
             [2011, '2.1%', '16.04%', '-3.88%', '12.02%'],
             [2012, '15.89%', '2.97%', '6.44%', '5.68%'],
             [2013, '32.15%', '-9.1%', '10.72%', '-27.61%'],
             [2014, '13.52%', '10.75%', '4.51%', '0.12%'],
             [2015, '1.38%', '1.28%', '5.21%', '-12.11%'],
             [2016, '11.77%', '0.69%', '5.31%', '8.1%'],
             [2017, '21.61%', '2.8%', '6.21%', '12.66%'],
             [2018, '-4.23%', '-0.02%', '4.53%', '-0.93%'],
             [2019, '31.21%', '9.64%', '3.69%', '19.08%'],
             [2020, '18.02%', '11.33%', '10.35%', '24.17%'],
             [2021, '28.47%', '-4.42%', '18.91%', '-3.75%'],
             [2022, '-18.01%', '-17.83%', '7.3%', '0.55%']]
df_columns = ['Year', 'S&P 500 (includes dividends)', 'US T. Bond', 'Real Estate', 'Gold']
df = pd.DataFrame(df_values, columns=df_columns)

print(
    df
    .assign(Gold = lambda x: x['Gold'].map(lambda x: x.rstrip('%').replace(',', '.')).astype('float64'))
)

# print(
#     df
#     ['Real Estate']
#     .map(lambda x: x.rstrip('%'))
# )

# ------------------------------------------
d = {
    'Дата ставки': ['2023-06-30','2023-06-29','2023-06-28','2023-06-27','2023-06-26','2023-06-23',
                    '2023-06-22','2023-06-21','2023-06-20','2023-06-19','2023-06-16','2023-06-15',
                    '2023-06-14','2023-06-13','2023-06-09','2023-06-08','2023-06-07','2023-06-06',
                    '2023-06-05','2023-06-02','2023-06-01'],
    'Ставка RUONIA, %': ['7,45','7,41','7,26','7,14','7,15','7,13','7,15','7,25','7,22','7,25','7,3',
                         '7,35','7,34','7,49','7,28','7,31','7,39','7,32','7,36','7,33','7,27'],
    'Объем сделок RUONIA, млрд руб.': [313.89,419.67,355.3,294.9,231.6,388.45,367.95,413.78,379.94,
                                       435.33,464.74,419.42,381.66,362.81,439.99,488.14,523.5,736.87,
                                       627.03,774.02,543.35]
    }
ruonia_june_2023 = pd.DataFrame(d)

print(
    ruonia_june_2023
    .assign(**{'Ставка RUONIA, %': lambda x: x['Ставка RUONIA, %'].map(lambda x: x.replace(',', '.'))})
)
# ----------------------------------------------------
pmi_usa_values = [['Июнь 2023', 54.4, 54.1], ['Май 2023', 54.9, 55.1], ['Апрель 2023', 53.6, 53.7],
              ['Март 2023', 52.6, 53.8], ['Февраль 2023', 50.6, 50.5], ['Январь 2023', 46.8, 46.6],
              ['Декабрь 2022', 44.7, 44.4], ['Ноябрь 2022', 46.2, 46.1], ['Октябрь 2022', 47.8, 46.6],
              ['Сентябрь 2022', 49.3, 49.2], ['Август 2022', 43.7, 44.3], ['Июль 2022', 47.3, 47.0],
              ['Июнь 2022', 52.7, 51.6], ['Май 2022', 53.4, 53.5], ['Апрель 2022', 55.6, 54.7],
              ['Март 2022', 58.0, 58.9], ['Февраль 2022', 56.5, 56.7], ['Январь 2022', 51.2, 50.9]]
pmi_usa_columns = ['месяц', 'факт', 'прогноз']
pmi_usa = pd.DataFrame(pmi_usa_values, columns=pmi_usa_columns)

print(
    pmi_usa
    .assign(год = lambda x: x['месяц'].map(lambda x: x.split()[1]), месяц = lambda x: x['месяц'].map(lambda x: x.split()[0]))
    .reindex(columns=['год', 'месяц', 'факт', 'прогноз'])
)

# --------------------------------------------------------------
moscow_exchange_values = [['2023-03-31', '2.450,67', '2.470,12', '2.472,53', '2.424,45', '-0.62%'],
                          ['2023-03-30', '2.465,93', '2.458,06', '2.467,97', '2.450,46', '+0.21%'],
                          ['2023-03-29', '2.460,87', '2.449,96', '2.468,48', '2.437,52', '+0.76%'],
                          ['2023-03-28', '2.442,19', '2.453,26', '2.458,37', '2.421,39', '+0.06%'],
                          ['2023-03-27', '2.440,68', '2.400,84', '2.440,68', '2.400,84', '+2.06%'],
                          ['2023-03-24', '2.391,53', '2.386,53', '2.394,03', '2.384,29', '+0.13%'],
                          ['2023-03-23', '2.388,35', '2.386,70', '2.396,50', '2.379,88', '-0.23%'],
                          ['2023-03-22', '2.393,88', '2.387,81', '2.398,76', '2.374,46', '-0.18%'],
                          ['2023-03-21', '2.398,15', '2.417,43', '2.431,23', '2.383,08', '+0.04%'],
                          ['2023-03-20', '2.397,16', '2.337,83', '2.397,16', '2.332,80', '+3.20%'],
                          ['2023-03-17', '2.322,78', '2.284,78', '2.322,78', '2.275,48', '+2.86%'],
                          ['2023-03-16', '2.258,22', '2.262,61', '2.269,01', '2.236,77', '-0.17%'],
                          ['2023-03-15', '2.262,07', '2.287,16', '2.295,06', '2.257,00', '-1.23%'],
                          ['2023-03-14', '2.290,32', '2.266,78', '2.290,32', '2.261,65', '+0.92%'],
                          ['2023-03-13', '2.269,47', '2.279,13', '2.289,70', '2.250,14', '-0.30%'],
                          ['2023-03-10', '2.276,25', '2.272,61', '2.283,18', '2.266,33', '-0.61%'],
                          ['2023-03-09', '2.290,14', '2.295,03', '2.302,10', '2.278,95', '-0.24%'],
                          ['2023-03-07', '2.295,60', '2.294,32', '2.298,93', '2.281,46', '+0.06%'],
                          ['2023-03-06', '2.294,12', '2.286,20', '2.297,86', '2.283,40', '+0.96%'],
                          ['2023-03-03', '2.272,20', '2.250,12', '2.273,52', '2.249,81', '+0.79%'],
                          ['2023-03-02', '2.254,30', '2.284,87', '2.286,27', '2.235,43', '-1.11%'],
                          ['2023-03-01', '2.279,65', '2.258,89', '2.287,48', '2.255,45', '+1.18%']]
moscow_exchange_columns = ['Дата', 'Цена', 'Откр.', 'Макс.', 'Мин.', 'Изм. %']
moex = pd.DataFrame(moscow_exchange_values, columns=moscow_exchange_columns)


moex_dif = (moex
    .assign(Дата = lambda x: x['Дата'].astype('datetime64[ns]'))
    .set_index(['Дата', 'Изм. %'])
    .map(lambda x: float(x.replace('.', '').replace(',', '.')))
    .reset_index()
    .reindex(columns=['Дата', 'Цена', 'Откр.', 'Макс.', 'Мин.', 'Изм. %'])
    .reset_index(drop=True)
)
print(moex_dif.head())
print()
print(moex_dif.info())

print(
    moex_dif
    .assign(**{'Изм. %': lambda x: x['Изм. %'].apply(lambda x: float(x.rstrip('%')))})
)

# --------------------------------------------------------------------
pmi_manufacturing_india_values = [['03.07.2023 (июнь)', 57.8, 58, 58.7],
       ['01.06.2023 (май)', 58.7, 56.5, 57.2], ['01.05.2023 (апр)', 57.2, 55.8, 56.4],
       ['03.04.2023 (мар)', 56.4, 55, 55.3], ['01.03.2023 (фев)', 55.3, 54.3, 55.4],
       ['01.02.2023 (янв)', 55.4, 57.4, 57.8], ['02.01.2023 (дек)', 57.8, 54.3, 55.7],
       ['01.12.2022 (нояб)', 55.7, 55, 55.3], ['01.11.2022 (окт)', 55.3, 54.9, 55.1],
       ['03.10.2022 (сент)', 55.1, 55.8, 56.2], ['01.09.2022 (авг)', 56.2, 55, 56.4],
       ['01.08.2022 (июль)', 56.4, 53.8, 53.9], ['01.07.2022 (июнь)', 53.9, 54.5, 54.6],
       ['01.06.2022 (май)', 54.6, 54.2, 54.7], ['02.05.2022 (апр)', 54.7, 53.8, 54.0],
       ['04.04.2022 (мар)', 54.0, 55.2, 54.9], ['02.03.2022 (фев)', 54.9, 54.3, 54.0],
       ['01.02.2022 (янв)', 54.0, 54.6, 55.5], ['03.01.2022 (дек)', 55.5, np.nan, 57.6],
       ['01.12.2021 (нояб)', 57.6, 55.1, 55.9], ['01.11.2021 (окт)', 55.9, 54, 53.7],
       ['01.10.2021 (сент)', 53.7, 51.8, 52.3], ['01.09.2021 (авг)', 52.3, 55, 55.3],
       ['02.08.2021 (июль)', 55.3, 50.5, 48.1], ['01.07.2021 (июнь)', 48.1, np.nan, 50.8],
       ['01.06.2021 (май)', 50.8, 52, 55.5], ['03.05.2021 (апр)', 55.5, 51.6, 55.4],
       ['05.04.2021 (мар)', 55.4, 57.5, 57.5], ['01.03.2021 (фев)', 57.5, 57.5, 57.7],
       ['01.02.2021 (янв)', 57.7, 56, 56.4]] 
pmi_manufacturing_india_columns = ['Дата выпуска', 'Факт.', 'Прогноз', 'Пред.']
pmi_manufacturing_india = pd.DataFrame(pmi_manufacturing_india_values, 
                                        columns=pmi_manufacturing_india_columns)

def replace_year(date):
    date = date.split()
    date[0] = date[0].split('.')[2]
    if(date[1] == '(дек)'):
        date[0] = str(int(date[0]) - 1)
    date = date[1] + ' ' + date[0]
    return date
    

# print(
#     pmi_manufacturing_india.join(pmi_manufacturing_india
#     ['Дата выпуска']
#     .str.split(expand=True)
#     .set_axis(['Date', 'Month'], axis=1)
#     )
#     .assign(Date = lambda x: x['Date'].str.split('.', expand=True)[2])
#     .assign(Date = lambda x: x[['Date', 'Month']].map(replace_year))
#     .assign(**{'Дата выпуска': lambda x: x['Month']+x['Date']})
# )

print(
    pmi_manufacturing_india
    .assign(**{'Дата выпуска': lambda x: x['Дата выпуска'].map(replace_year)})
)

# ---------------------------------------------------------------------
pmi_manufacturing_turkey_values = [['03.07.2023 (июнь)', 51.5], ['01.06.2023 (май)', 51.5],
       ['02.05.2023 (апр)', 51.5], ['03.04.2023 (мар)', 50.9], ['01.03.2023 (фев)', 50.1],
       ['01.02.2023 (янв)', 50.1], ['02.01.2023 (дек)', 48.1], ['01.12.2022 (нояб)', 45.7],
       ['01.11.2022 (окт)', 46.4], ['03.10.2022 (сент)', 46.9], ['01.09.2022 (авг)', 47.4],
       ['01.08.2022 (июль)', 46.9], ['01.07.2022 (июнь)', 48.1], ['01.06.2022 (май)', 49.2],
       ['05.05.2022 (апр)', 49.2], ['01.04.2022 (мар)', 49.4], ['01.03.2022 (фев)', 50.4],
       ['01.02.2022 (янв)', 50.5], ['03.01.2022 (дек)', 52.1], ['01.12.2021 (нояб)', 52.0],
       ['01.11.2021 (окт)', 51.2], ['01.10.2021 (сент)', 52.5], ['01.09.2021 (авг)', 54.1],
       ['02.08.2021 (июль)', 54.0], ['01.07.2021 (июнь)', 51.3], ['01.06.2021 (май)', 49.3],
       ['03.05.2021 (апр)', 50.4], ['01.04.2021 (мар)', 52.6], ['01.03.2021 (фев)', 51.7],
       ['01.02.2021 (янв)', 54.4]]
pmi_manufacturing_turkey_columns = ['Дата выпуска', 'Факт.']
pmi_manufacturing_turkey = pd.DataFrame(pmi_manufacturing_turkey_values, 
                                        columns=pmi_manufacturing_turkey_columns)


def date_changing(date):
    date = date.split()[0]
    return date

def period_changing(date):
    date = (date
            .replace('(', ' ')
            .replace(')', ' ')
            .replace('.', ' ')
            .split()
            [2:4]
            )
    if(date[1] == 'дек'):
        date[0] = str(int(date[0]) - 1)
    return date[1] + ' ' + date[0]
     


pmi_manufacturing_turkey_mod = (
    pmi_manufacturing_turkey
    .assign(**{'Период': lambda x: x['Дата выпуска'].map(period_changing), 'Дата выпуска': lambda x: pd.to_datetime(x['Дата выпуска'].map(date_changing), dayfirst=True)})
    .reindex(columns=['Дата выпуска', 'Период', 'Факт.'])
    .reset_index()
    .drop(['index'], axis=1)
)
print(pmi_manufacturing_turkey_mod)
print()
print(pmi_manufacturing_turkey_mod.info())

# ----------------------------------------------------
lithium_values = [['Боливия', '21 млн тонн'], ['Аргентина', '19 млн тонн'],
                  ['Чили', '11 млн тонн'], ['Австралия', '7,9 млн тонн'],
                  ['США', '9,1 млн тонн'], ['Иран', '8,5 млн тонн'],
                  ['Китай', '6,8 млн тонн'], ['Германия', '3,2 млн тонн'],
                  ['Конго', '3 млн тонн'], ['Канада', '2,9 млн тонн'],
                  ['Мексика', '1,7 млн тонн'], ['Бразилия', '0,47 млн тонн'],
                  ['Чехия', '1,3 млн тонн'], ['Сербия', '1,2 млн тонн'],
                  ['Россия', '1 млн тонн'], ['Перу', '0,88 млн тонн'],
                  ['Зимбабве', '0,69 млн тонн'], ['Мали', '0,84 млн тонн']]
lithium_columns = ['Страна', 'Разведанные запасы']
lithium = pd.DataFrame(lithium_values, columns=lithium_columns)

def mod_column(data):
    data = float(data.split()[0].replace(',', '.'))
    return data

lithium = (
    lithium
    .assign(**{'Разведанные запасы, млн тонн': lambda x: x['Разведанные запасы'].map(mod_column)})
    .drop(['Разведанные запасы'], axis=1 )
    .sort_values('Разведанные запасы, млн тонн', ascending=False)
    .reset_index(drop=True)
)
print(lithium)
print()
print(lithium.info())

# ------------------------------------------------------
df_values = [['БО-002Р-03', 'ПАО «Магнит»', '22.05.2020', '19.05.2023', '15 млрд. руб.', '5,90%'],
             ['БО-002Р-02', 'ПАО «Магнит»', '29.04.2020', '26.04.2023', '10 млрд. руб.', '6,70%'],
             ['БО-002Р-01', 'ПАО «Магнит»', '05.03.2020', '02.03.2023', '15 млрд. руб.', '6,20%'],
             ['БО-003Р-05', 'ПАО «Магнит»', '26.12.2019', '22.12.2022', '10 млрд. руб.', '6,60%'],
             ['БО-003Р-04', 'ПАО «Магнит»', '05.11.2019', '03.05.2022', '10 млрд. руб.', '6,90%'],
             ['БО-003Р-01', 'ПАО «Магнит»', '05.02.2019', '01.02.2022', '10 млрд. руб.', '8,70%'],
             ['БО-003Р-02', 'ПАО «Магнит»', '26.02.2019', '23.02.2021', '10 млрд. руб.', '8,50%'],
             ['БО-003Р-03', 'ПАО «Магнит»', '27.06.2019', '24.12.2020', '10 млрд. руб.', '7,85%'],
             ['БО-001Р-04', 'ПАО «Магнит»', '05.07.2016', '28.12.2017', '10 млрд. руб.', '10,00%'],
             ['БО-001Р-03', 'ПАО «Магнит»', '12.04.2016', '10.04.2018', '10 млрд. руб.', '10,60%'],
             ['БО-001Р-02', 'ПАО «Магнит»', '29.02.2016', '26.02.2018', '10 млрд. руб.', '11,20%'],
             ['БО-001Р-01', 'ПАО «Магнит»', '11.11.2015', '10.05.2017', '10 млрд. руб.', '11,20%'],
             ['БO-11', 'ПАО «Магнит»', '20.10.2015', '18.04.2017', '10 млрд. руб.', '11,70%'],
             ['БO-10', 'ПАО «Магнит»', '23.07.2015', '21.07.2016', '10 млрд. руб.', '11,60%'],
             ['03', 'ПАО «Магнит»', '15.05.2015', '13.05.2016', '5 млрд. руб.', '12,10%'],
             ['02', 'ПАО «Магнит»', '15.05.2015', '13.05.2016', '5 млрд. руб.', '12,10%'],
             ['БO-09', 'ПАО «Магнит»', '02.04.2013', '29.03.2016', '5 млрд. руб.', '8,40%'],
             ['БO-08', 'ПАО «Магнит»', '02.04.2013', '29.03.2016', '5 млрд. руб.', '8,40%'],
             ['01', 'ПАО «Магнит»', '26.02.2013', '23.02.2016', '5 млрд. руб.', '8,50%'],
             ['БO-07', 'ПАО «Магнит»', '24.09.2012', '21.09.2015', '5 млрд. руб.', '8,90%'],
             ['БO-06', 'ПАО «Магнит»', '26.04.2011', '22.04.2014', '5 млрд. руб.', '7,75%'],
             ['БO-05', 'ПАО «Магнит»', '04.03.2011', '28.02.2014', '5 млрд. руб.', '8,00%'],
             ['БO-04', 'ПАО «Магнит»', '13.09.2010', '09.09.2013', '2 млрд. руб.', '8,25%'],
             ['БO-03', 'ПАО «Магнит»', '13.09.2010', '09.09.2013', '1,5 млрд. руб.', '8,25%'],
             ['БO-02', 'ПАО «Магнит»', '13.09.2010', '09.09.2013', '1 млрд. руб.', '8,25%'],
             ['БO-01', 'ПАО «Магнит»', '13.09.2010', '09.09.2013', '1 млрд. руб.', '8,25%'],
             ['02', 'ООО «Магнит Финанс»', '30.03.2007', '23.03.2012', '5 млрд. руб.', '8,20%'],
             ['01', 'ООО «Магнит Финанс»', '23.11.2005', '19.11.2008', '2 млрд. руб.', '9,34%']]
df_columns = ['Серия', 'Эмитент', 'Дата размещения', 'Дата погашения',
              'Объем выпуска', 'Ставка купона']
df = pd.DataFrame(df_values, columns=df_columns)

def fix_prod_volume(x):
    x = x.split()[0].replace(',', '.')
    return x

def fix_coupone(x):
    x = x.rstrip('%').replace(',', '.')
    return x

print(
    df
    .assign(**{'Объем выпуска, млрд руб.': lambda x: x['Объем выпуска'].map(fix_prod_volume).astype('float64'), 'Ставка купона, %': lambda x: x['Ставка купона'].map(fix_coupone).astype('float64')})
    .drop(['Объем выпуска', 'Ставка купона'], axis=1)
    [['Серия', 'Объем выпуска, млрд руб.', 'Ставка купона, %']]
    .sort_values(['Объем выпуска, млрд руб.', 'Ставка купона, %'], ascending=False)
    .reset_index(drop=True)
)

# ---------------------------------------------------------------------
df_values = [['2017 год (за полугодие, 9 месяцев и год)', 2.786,
              '31 132 ₽ млн / 521 $ млн'],
             ['2018 год (за 1 квартал, полугодие, 9 месяцев и год)', 5.902,
              '65 951 ₽ млн / 1 007 $ млн'],
             ['2019 год (за 1 квартал, полугодие, 9 месяцев и год)', 5.335,
              '59 615 ₽ млн / 911 $ млн'],
             ['2020 год (за полугодие, 9 месяцев и год)', 3.943,
              '44 060 ₽ млн / 593 $ млн'],
             ['2021 год (за 1 квартал, полугодие и 9 месяцев)', 7.988,
              '89 261 ₽ млн / 1 223 $ млн']]
df_columns = ['Год', 'Размер дивиденда на 1 акцию, руб.', 'Начислено дивидендов']
df = pd.DataFrame(df_values, columns=df_columns)

def remove_sum(x):
    x = x.split('/')[0]
    return x

def year_only(x):
    x = x.split(' (')[0]
    return x

print(
    df
    .assign(**{'Начислено дивидендов': lambda x: x['Начислено дивидендов'].map(remove_sum), 
    'Год': lambda x: x['Год'].map(year_only)})
)

# -----------------------------------------------------------------
depo_values = [['New Energy Bank', 1_000_000_000, 8.30, 'O/N'],
               ['AgroFoodBank', 5_000_000_000, 8.50, '1W'],
               ['First Ecologic Bank', 4_500_000_000, 8.60, '1M'],
               ['Cryptocurrencybank', 2_700_000_000, 8.30, 'O/N'],
               ['Big Business Bank', 1_500_000_000, 8.27, 'O/N'],
               ['GreenEnergyBank', 1_800_000_000, 8.35, 'O/N'],
               ['Allmoneybank', 5_900_000_000, 8.45, 'O/N'],
               ['ClearWaterBank', 3_000_000_000, 8.40, 'O/N'],
               ['First Ecologic Bank', 3_000_000_000, 8.41, 'O/N'],
               ['Cryptocurrencybank', 7_500_000_000, 8.50, 'O/N'],
               ['Allmoneybank', 2_400_000_000, 9.00, '3M'],
               ['Big Business Bank', 2_500_000_000, 8.30, 'O/N'],
               ['Golden Silver Bank', 2_500_000_000, 8.65, '1M'],
               ['New Energy Bank', 2_000_000_000, 8.45, '1W'],
               ['AgroFoodBank', 700_000_000, 8.25, 'O/N'],
               ['Golden Silver Bank', 4_300_000_000, 8.40, 'O/N'],
               ['SmallBusinessBank', 2_000_000_000, 8.31, 'O/N'],
               ['SmallBusinessBank', 8_000_000_000, 8.70, '1M'],
               ['New Energy Bank', 4_000_000_000, 8.80, '3M']]
depo_columns = ['Банк', 'Сумма, руб.', 'Ставка', 'Срок']
depo = pd.DataFrame(depo_values, columns=depo_columns)

def day_number_counter(x):
    variants = {
        'O/N': 1,   
        '1W': 7,
        '1M': 30,   
        '3M': 90
    }
    return variants.get(x, np.nan)

print(
    depo
    .assign(**{'Количество дней': lambda x: x['Срок'].map(day_number_counter)})
)

# -----------------------------------------------------------------
depo_values = [['New Energy Bank', 1_000_000_000, 8.30, 'O/N'],
               ['AgroFoodBank', 5_000_000_000, 8.50, '1W'],
               ['First Ecologic Bank', 4_500_000_000, 8.60, '1M'],
               ['Cryptocurrencybank', 2_700_000_000, 8.30, 'O/N'],
               ['Big Business Bank', 1_500_000_000, 8.27, 'O/N'],
               ['GreenEnergyBank', 1_800_000_000, 8.35, 'O/N'],
               ['Allmoneybank', 5_900_000_000, 8.45, 'O/N'],
               ['ClearWaterBank', 3_000_000_000, 8.40, 'O/N'],
               ['First Ecologic Bank', 3_000_000_000, 8.41, 'O/N'],
               ['Cryptocurrencybank', 7_500_000_000, 8.50, 'O/N'],
               ['Allmoneybank', 2_400_000_000, 9.00, '3M'],
               ['Big Business Bank', 2_500_000_000, 8.30, 'O/N'],
               ['Golden Silver Bank', 2_500_000_000, 8.65, '1M'],
               ['New Energy Bank', 2_000_000_000, 8.45, '1W'],
               ['AgroFoodBank', 700_000_000, 8.25, 'O/N'],
               ['Golden Silver Bank', 4_300_000_000, 8.40, 'O/N'],
               ['SmallBusinessBank', 2_000_000_000, 8.31, 'O/N'],
               ['SmallBusinessBank', 8_000_000_000, 8.70, '1M'],
               ['New Energy Bank', 4_000_000_000, 8.80, '3M']]
depo_columns = ['Банк', 'Сумма, руб.', 'Ставка', 'Срок']
depo = pd.DataFrame(depo_values, columns=depo_columns)

print(
    depo
    .assign(**{'Проценты к получению': lambda x: (x['Сумма, руб.']*x['Ставка'] / 100 / 365 * x['Срок'].map(day_number_counter)).round(2)})
)
import pandas as pd
import numpy as np 

interest_rates_values = [['Австралия', 'Резервный банк Австралии', 4.1, '06.06.2023'],
       ['Бразилия', 'Центральный банк Бразилии', 13.75, '04.08.2022'],
       ['Великобритания', 'Банк Англии', 5.0, '22.06.2023'],
       ['Дания', 'Национальный банк Дании', 3.25, '15.06.2023'],
       ['Еврозона', 'Европейский центральный банк', 4.0, '15.06.2023'],
       ['Индия', 'Резервный банк Индии', 6.5, '08.02.2023'],
       ['Канада', 'Банк Канады', 5.0, '12.07.2023'],
       ['Китай', 'Народный банк Китая', 3.55, '20.06.2023'],
       ['Мексика', 'Банк Мексики', 11.25, '30.03.2023'],
       ['Новая Зеландия', 'Резервный банк Новой Зеландии', 5.5,
        '24.05.2023'],
       ['Россия', 'Центральный банк Российской Федерации', 8.5,
        '24.07.2023'],
       ['США', 'Федеральная резервная система', 5.25, '04.05.2023'],
       ['Турция', 'Центральный банк Турции', 17.5, '20.07.2023'],
       ['Швейцария', 'Национальный банк Швейцарии', 1.75, '22.06.2023'],
       ['Швеция', 'Банк Швеции', 3.75, '30.06.2023'],
       ['ЮАР', 'Южно-Африканский резервный банк', 8.25, '25.05.2023'],
       ['Япония', 'Банк Японии', -0.1, '03.08.2016']]
interest_rates_columns = ['Страна', 'Банк', 'Ставка', 'Дата вступления в силу']
interest_rates = pd.DataFrame(interest_rates_values, columns=interest_rates_columns)

print(interest_rates.set_index('Страна')['Ставка'].idxmax())
print(interest_rates.set_index('Страна')['Ставка'].idxmin())

# --------------------------------------------------
pmi_manufacturing_usa_values = [['03.07.2023 (июнь)', 46.0, 47.2, 46.9],
       ['01.06.2023 (май)', 46.9, 47.0, 47.1], ['01.05.2023 (апр)', 47.1, 46.8, 46.3],
       ['03.04.2023 (мар)', 46.3, 47.5, 47.7], ['01.03.2023 (фев)', 47.7, 48.0, 47.4],
       ['01.02.2023 (янв)', 47.4, 48.0, 48.4], ['04.01.2023 (дек)', 48.4, 48.5, 49.0],
       ['01.12.2022 (нояб)', 49.0, 49.8, 50.2], ['01.11.2022 (окт)', 50.2, 50.0, 50.9],
       ['03.10.2022 (сент)', 50.9, 52.2, 52.8], ['01.09.2022 (авг)', 52.8, 52.0, 52.8],
       ['01.08.2022 (июль)', 52.8, 52.0, 53.0], ['01.07.2022 (июнь)', 53.0, 54.9, 56.1],
       ['01.06.2022 (май)', 56.1, 54.5, 55.4], ['02.05.2022 (апр)', 55.4, 57.6, 57.1],
       ['01.04.2022 (мар)', 57.1, 59.0, 58.6], ['01.03.2022 (фев)', 58.6, 58.0, 57.6],
       ['01.02.2022 (янв)', 57.6, 57.5, 58.8], ['04.01.2022 (дек)', 58.7, 60.0, 61.1],
       ['01.12.2021 (нояб)', 61.1, 61.0, 60.8], ['01.11.2021 (окт)', 60.8, 60.5, 61.1],
       ['01.10.2021 (сент)', 61.1, 59.6, 59.9], ['01.09.2021 (авг)', 59.9, 58.6, 59.5],
       ['02.08.2021 (июль)', 59.5, 60.9, 60.6], ['01.07.2021 (июнь)', 60.6, 61.0, 61.2],
       ['01.06.2021 (май)', 61.2, 60.9, 60.7], ['03.05.2021 (апр)', 60.7, 65.0, 64.7],
       ['01.04.2021 (мар)', 64.7, 61.3, 60.8], ['01.03.2021 (фев)', 60.8, 58.8, 58.7],
       ['01.02.2021 (янв)', 58.7, 60.0, 60.5]]
pmi_manufacturing_usa_columns = ['Дата выпуска', 'Факт.', 'Прогноз', 'Пред.']
pmi_manufacturing_usa = pd.DataFrame(pmi_manufacturing_usa_values, 
                                        columns=pmi_manufacturing_usa_columns)

# print(
#     pmi_manufacturing_usa
#     .assign(Факт = pmi_manufacturing_usa['Прогноз'] - pmi_manufacturing_usa['Факт.'])
#     .rename({'Факт': "Прогноз - Факт"}, axis=1)
# )

# ----------------------------------------------------------
pmi_manufacturing_eurozone_values = [['03.07.2023 (июнь)', 43.4, 43.6, 44.8],
       ['01.06.2023 (май)', 44.8, 44.6, 45.8], ['02.05.2023 (апр)', 45.8, 45.5, 47.3],
       ['03.04.2023 (мар)', 47.3, 47.1, 48.5], ['01.03.2023 (фев)', 48.5, 48.5, 48.8],
       ['01.02.2023 (янв)', 48.8, 48.8, 47.8], ['02.01.2023 (дек)', 47.8, 47.8, 47.1],
       ['01.12.2022 (нояб)', 47.1, 47.3, 46.4], ['02.11.2022 (окт)', 46.4, 46.6, 48.4],
       ['03.10.2022 (сент)', 48.4, 48.5, 49.6], ['01.09.2022 (авг)', 49.6, 49.7, 49.7],
       ['01.08.2022 (июль)', 49.8, 49.6, 52.1], ['01.07.2022 (июнь)', 52.1, 52.0, 54.6],
       ['01.06.2022 (май)', 54.6, 54.4, 55.5], ['02.05.2022 (апр)', 55.5, 55.3, 56.5],
       ['01.04.2022 (мар)', 56.5, 57.0, 58.2], ['01.03.2022 (фев)', 58.2, 58.4, 58.7],
       ['01.02.2022 (янв)', 58.7, 59.0, 58.0], ['03.01.2022 (дек)', 58.0, 58.0, 58.4],
       ['01.12.2021 (нояб)', 58.4, 58.6, 58.6], ['02.11.2021 (окт)', 58.3, 58.5, 58.3],
       ['01.10.2021 (сент)', 58.6, 58.7, 61.4], ['01.09.2021 (авг)', 61.4, 61.5, 62.8],
       ['02.08.2021 (июль)', 62.8, 62.6, 63.4], ['01.07.2021 (июнь)', 63.4, 63.1, 63.1],
       ['01.06.2021 (май)', 63.1, 62.8, 62.8], ['03.05.2021 (апр)', 62.9, 63.3, 63.3],
       ['01.04.2021 (мар)', 62.5, 62.4, 57.9], ['01.03.2021 (фев)', 57.9, 57.7, 54.8],
       ['01.02.2021 (янв)', 54.8, 54.7, 54.7]]
pmi_manufacturing_eurozone_columns = ['Дата выпуска', 'Факт.', 'Прогноз', 'Пред.']
pmi_manufacturing_eurozone = pd.DataFrame(pmi_manufacturing_eurozone_values, 
                                        columns=pmi_manufacturing_eurozone_columns)


# print(
#     pmi_manufacturing_eurozone
#     .assign(Факт = pmi_manufacturing_eurozone['Прогноз'] - pmi_manufacturing_eurozone['Факт.'])
#     .rename({'Факт': "Прогноз - Факт"}, axis=1)
#     .assign(date = pmi_manufacturing_eurozone['Дата выпуска']
#             .str.split(expand=True)[0].astype('datetime64[ns]'))
#     .set_index('date')
#     .sort_index()
#     .reset_index(drop=True)
# )

# ------------------------------------------------------------------
import pandas as pd
import numpy as np
inflation_russia = {'Год': [2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012,
                            2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001,
                            2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991],
                   'Инфляция': [11.94, 8.39, 4.91, 3.04, 4.26, 2.51, 5.39, 12.91, 11.35,
                                6.47, 6.57, 6.1 , 8.78, 8.8, 13.28, 11.87, 9.0, 10.92,
                                11.73, 11.99, 15.06, 18.58, 20.18, 36.53, 84.43, 11.03,
                                21.81, 131.30, 215.14, 839.90, 2508.84, 160.4]}
inflation_russia = pd.DataFrame(inflation_russia)

inflation_russia = (inflation_russia
    .set_index('Год')
    .sort_index()
    .reset_index()
)
# print(
#    np.round(
# (inflation_russia
# .assign(inf_index = ((inflation_russia['Инфляция'])/100  + 1))
# .query('Год > 2010')
# ['inf_index'].cumprod().iloc[-1]
# ) * 25, 2)
# )

# -------------------------------------------------------------------------
moex_volumes_values = [['июль 2023', 3602.5, 6000, 27400, 65200, 53.5],
       ['июнь 2023', 3072.9, 6900, 23800, 61700, 29.0],
       ['май 2023', 3212.3, 5900, 21000, 62900, 25.5],
       ['апрель 2023', 3015.6, 5000, 21900, 59400, 40.2],
       ['март 2023', 3186.0, 5900, 24700, 70800, 21.2],
       ['февраль 2023', 2487.9, 4300, 19400, 56800, 12.9],
       ['январь 2023', 1599.7, 3500, 16900, 59300, 12.1],
       ['декабрь 2022', 4206.9, 4700, 21000, 63400, 19.0],
       ['ноябрь 2022', 3169.5, 3000, 14800, 52400, 13.6],
       ['октябрь 2022', 1953.6, 3600, 14900, 50100, 10.7],
       ['сентябрь 2022', 2506.4, 4700, 19500, 46900, 13.1],
       ['август 2022', 1872.1, 4900, 20900, 52900, 12.3],
       ['июль 2022', 1492.7, 6400, 17300, 50200, 10.1],
       ['июнь 2022', 1531.1, 5300, 17800, 48400, 8.7],
       ['май 2022', 995.4, 5600, 16100, 55400, 4.1],
       ['апрель 2022', 1446.0, 4200, 22000, 60400, 4.6],
       ['март 2022', 635.3, 2300, 41000, 110300, 6.4],
       ['февраль 2022', 5648.8, 16300, 34500, 40200, 12.3],
       ['январь 2022', 5002.6, 16700, 27000, 37800, 7.9]]
moex_volumes_columns = ['месяц год', 'Объем торгов на фондовом рынке, млрд руб.',
       'Срочный рынок, млрд руб.', 'Объем торгов на валютном рынке, млрд руб.',
       'Объем торгов на денежном рынке, млрд руб.',
       'Объем торгов драгоценными металлами (спот и своп), млрд руб.']
moex_volumes = pd.DataFrame(moex_volumes_values, columns=moex_volumes_columns)

# print( 
#     moex_volumes
#     .assign(sum = moex_volumes.iloc[:,1:].sum(axis=1))
#     .rename({'sum': 'Итого, млрд руб.'}, axis=1)
#     .loc[:,['месяц год', 'Итого, млрд руб.']]
# )

# -------------------------------------------------------------
brent_wti_values = [['30.07.2023', 86.24, 82.82], ['23.07.2023', 84.99, 80.58],
                    ['16.07.2023', 81.07, 77.07], ['09.07.2023', 79.87, 75.42],
                    ['02.07.2023', 78.47, 73.86], ['25.06.2023', 74.9, 70.64],
                    ['18.06.2023', 73.85, 69.16], ['11.06.2023', 76.61, 71.78],
                    ['04.06.2023', 74.79, 70.17], ['28.05.2023', 76.13, 71.74],
                    ['21.05.2023', 76.95, 72.67], ['14.05.2023', 75.58, 71.55],
                    ['07.05.2023', 74.17, 70.04], ['30.04.2023', 75.3, 71.34],
                    ['23.04.2023', 79.54, 76.78], ['16.04.2023', 81.66, 77.71],
                    ['09.04.2023', 85.87, 82.52], ['02.04.2023', 85.12, 80.7],       
                    ['26.03.2023', 79.89, 75.67], ['19.03.2023', 74.99, 69.26],       
                    ['12.03.2023', 72.97, 66.74], ['05.03.2023', 82.78, 76.68],       
                    ['26.02.2023', 85.83, 79.68], ['19.02.2023', 83.16, 76.47],       
                    ['12.02.2023', 83.0, 76.34], ['05.02.2023', 86.39, 79.75],       
                    ['29.01.2023', 79.94, 73.2], ['22.01.2023', 86.66, 79.41],       
                    ['15.01.2023', 87.63, 81.64], ['08.01.2023', 85.28, 80.11],
                    ['01.01.2023', 78.75, 73.69]]
brent_wti_columns = ['Дата', 'Закр._brent', 'Закр._wti']
brent_wti = pd.DataFrame(brent_wti_values, columns=brent_wti_columns)

# print(
#     brent_wti
#     .assign(spread_brent_wti = brent_wti['Закр._brent'] - brent_wti['Закр._wti'])
# )

rates_values = [['Япония', -0.1, 3.3], ['Швейцария', 1.75, 1.6],
                ['Южная Корея', 3.5, 2.3], ['Сингапур', 3.51, 4.5],
                ['Китай', 3.55, 0.0], ['Австралия', 4.1, 6.0],
                ['еврозона', 4.25, 5.3], ['Канада', 5.0, 2.8],
                ['Великобритания', 5.25, 7.9], ['Соединенные Штаты', 5.5, 3.3],
                ['Индонезия', 5.75, 3.08], ['Саудовская Аравия', 6.0, 2.7],
                ['Индия', 6.5, 4.81], ['ЮАР', 8.25, 5.4], ['Россия', 8.5, 3.2],
                ['Мексика', 11.25, 5.06], ['Бразилия', 13.25, 3.16], ['Турция', 17.5, 47.83]]
rates_columns = ['Страна', 'Процентная ставка ЦБ', 'Инфляция']
rates = pd.DataFrame(rates_values, columns=rates_columns)

# rates = (
#     rates
#     .assign(real = rates['Процентная ставка ЦБ'] - rates['Инфляция'])
#     .rename({'real': 'Реальная ставка'}, axis=1)
# )
# print(rates)
# print()
# print(rates.iloc[[rates['Реальная ставка'].idxmax()]])
# print()
# print(rates.iloc[[rates['Реальная ставка'].idxmin()]])

#---------------------------------------------
depo_values = [['New Energy Bank', 1_000_000_000, 8.30, 'O/N'],
               ['AgroFoodBank', 5_000_000_000, 8.50, '1W'],
               ['First Ecologic Bank', 4_500_000_000, 8.60, '1M'],
               ['Cryptocurrencybank', 2_700_000_000, 8.30, 'O/N'],
               ['GreenEnergyBank', 1_800_000_000, 8.35, 'O/N'],
               ['ClearWaterBank', 3_000_000_000, 8.40, 'O/N'],
               ['Cryptocurrencybank', 7_500_000_000, 8.50, 'O/N'],
               ['New Energy Bank', 2_000_000_000, 8.45, '1W'],
               ['AgroFoodBank', 700_000_000, 8.25, 'O/N'],
               ['Golden Silver Bank', 4_300_000_000, 8.40, 'O/N'],
               ['New Energy Bank', 4_000_000_000, 8.80, '3M']]
depo_columns = ['Банк', 'Сумма, руб.', 'Ставка', 'Срок']
depo = pd.DataFrame(depo_values, columns=depo_columns)

# print(depo.query('Срок == "O/N"')['Сумма, руб.'].sum())

#------------------------------------------
depo_values = [['New Energy Bank', 1_000_000_000, 8.30, 'O/N'],
               ['Cryptocurrencybank', 2_700_000_000, 8.30, 'O/N'],
               ['Big Business Bank', 1_500_000_000, 8.27, 'O/N'],
               ['GreenEnergyBank', 1_800_000_000, 8.35, 'O/N'],
               ['Allmoneybank', 5_900_000_000, 8.45, 'O/N'],
               ['ClearWaterBank', 3_000_000_000, 8.40, 'O/N'],
               ['First Ecologic Bank', 3_000_000_000, 8.41, 'O/N'],
               ['Cryptocurrencybank', 7_500_000_000, 8.50, 'O/N'],
               ['Big Business Bank', 2_500_000_000, 8.30, 'O/N'],
               ['AgroFoodBank', 700_000_000, 8.25, 'O/N'],
               ['Golden Silver Bank', 4_300_000_000, 8.40, 'O/N'],
               ['SmallBusinessBank', 2_000_000_000, 8.31, 'O/N']]
depo_columns = ['Банк', 'Сумма, руб.', 'Ставка', 'Срок']
depo = pd.DataFrame(depo_values, columns=depo_columns)

# print(
#        depo
#        .assign(percent = ((depo['Сумма, руб.'] * depo['Ставка'])/(100 * 365))
#               .round(2))
#        .rename({'percent': 'Проценты к получению'}, axis = 1)
# )

# ------------------------------------------------------------
df_values = [['Северо-Кавказский', 576, 19, 265], ['Южный', 2860, 122, 1352],
             ['Центральный', 4826, 83, 1965], ['Приволжский', 4826, 123, 1904],
             ['Северо-Западный', 2146, 35, 740], ['Уральский', 1932, 82, 867],
             ['Сибирский', 1211, 24, 490]]
df_columns = ['Федеральный округ', 'Магазины у дома', 'Супермаркеты', 'Дрогери']
df = pd.DataFrame(df_values, columns=df_columns)

# print(
#        df
#        .set_index('Федеральный округ')
#        .sum(axis=0)
# )

# -------------------------------------------------------------
# Дилер банка "Royal Oil Bank" в течение рабочего дня 
# привлекал и размещал денежные средства на депозиты овернайт 
# у нескольких банков-контрагентов. Сделки представлены 
# в датафрейме depo. В колонке 'Направление' содержатся 
# следующие значения: П - привлечение, Р - размещение.

#     Добавьте колонку 'Проценты', в которую внесите значения 
#     процентов по сделкам, округленные до сотых. В зависимости 
#     от направления сделки, проценты будут либо со знаком "минус" - 
#     по операциям привлечения, либо со знаком "плюс" - по операциям размещения.
#     Выведите итоговый датафрейм на печать.
#     Затем распечатайте пустую строчку.
#     Просуммируйте значения по столбцу 'Проценты' , 
#     округлите полученный результат до сотых и выведите 
#     его на печать. Полученное значение будет являться 
#     финансовым результатом операций дилера за день.

# depo_values = [['New Energy Bank', 500_000_000, 8.15, 'П', 'O/N'],
#                ['AgroFoodBank', 1_000_000_000, 8.20, 'П', 'O/N'],
#                ['First Ecologic Bank', 400_000_000, 8.11, 'П', 'O/N'],
#                ['Cryptocurrencybank', 700_000_000, 8.15, 'П', 'O/N'],
#                ['Big Business Bank', 2_600_000_000, 8.30, 'Р', 'O/N'],
#                ['SmallBusinessBank', 2_000_000_000, 8.20, 'П', 'O/N'],
#                ['GreenEnergyBank', 1_000_000_000, 8.10, 'П', 'O/N'],
#                ['Allmoneybank', 3_000_000_000, 8.27, 'Р', 'O/N'],
#                ['ClearWaterBank', 300_000_000, 8.00, 'П', 'O/N'],
#                ['First Ecologic Bank', 700_000_000, 8.15, 'П', 'O/N'],
#                ['Cryptocurrencybank', 500_000_000, 8.15, 'П', 'O/N'],
#                ['Allmoneybank', 1_500_000_000, 8.20, 'Р', 'O/N'],
#                ['Golden Silver Bank', 800_000_000, 8.05, 'П', 'O/N'],
#                ['New Energy Bank', 300_000_000, 8.00, 'П', 'O/N'],
#                ['AgroFoodBank', 400_000_000, 8.00, 'П', 'O/N'],
#                ['Golden Silver Bank', 500_000_000, 8.03, 'П', 'O/N'],
#                ['SmallBusinessBank', 400_000_000, 8.00, 'П', 'O/N'],
#                ['New Energy Bank', 500_000_000, 7.90, 'П', 'O/N'],
#                ['Big Business Bank', 2_900_000_000, 8.15, 'Р', 'O/N']]
# depo_columns = ['Банк', 'Сумма, руб.', 'Ставка', 'Направление', 'Срок']
# depo = pd.DataFrame(depo_values, columns=depo_columns)

# depo_on = (
#        depo
#        .assign(Проценты = (depo['Сумма, руб.'] * depo['Ставка'] / (100 * 365)).round(2) * depo['Направление'].apply(lambda x: 1 if x == 'Р' else -1))
# )

# print(depo_on)
# print()
# print(depo_on['Проценты'].sum().round(2))

# -------------------------------------------------------------
# depo_values = [['New Energy Bank', 1_000_000_000, 8.30, 'O/N'],
#                ['Cryptocurrencybank', 2_700_000_000, 8.35, 'O/N'],
#                ['Big Business Bank', 1_500_000_000, 8.27, 'O/N'],
#                ['GreenEnergyBank', 1_800_000_000, 8.35, 'O/N'],
#                ['Allmoneybank', 5_900_000_000, 8.45, 'O/N'],
#                ['ClearWaterBank', 3_000_000_000, 8.40, 'O/N'],
#                ['First Ecologic Bank', 3_000_000_000, 8.41, 'O/N'],
#                ['Cryptocurrencybank', 7_500_000_000, 8.50, 'O/N'],
#                ['Big Business Bank', 2_500_000_000, 8.35, 'O/N'],
#                ['AgroFoodBank', 700_000_000, 8.25, 'O/N'],
#                ['Golden Silver Bank', 4_300_000_000, 8.42, 'O/N'],
#                ['SmallBusinessBank', 2_000_000_000, 8.31, 'O/N']]
# depo_columns = ['Банк', 'Сумма, руб.', 'Ставка', 'Срок']
# depo = pd.DataFrame(depo_values, columns=depo_columns)

# print(((depo['Сумма, руб.'] * depo['Ставка']).sum() / depo['Сумма, руб.'].sum()).round(2))

# -----------------------------------------------------------------

# currency_values = [['USDRUB_TOM', 'buy', 1_000_000, 96.80],
#                ['USDRUB_TOM', 'sell', 100_000, 96.90],
#                ['USDRUB_TOM', 'sell', 200_000, 97.20],
#                ['USDRUB_TOM', 'sell', 500_000, 97.50],
#                ['USDRUB_TOM', 'sell', 200_000, 97.30],
#                ['USDRUB_TOM', 'buy', 2_000_000, 97.00],
#                ['USDRUB_TOM', 'buy', 5_000_000, 96.85],
#                ['USDRUB_TOM', 'sell', 1_000_000, 97.05],
#                ['USDRUB_TOM', 'sell', 1_000_000, 97.10],
#                ['USDRUB_TOM', 'sell', 1_000_000, 97.15],
#                ['USDRUB_TOM', 'sell', 1_000_000, 97.20],
#                ['USDRUB_TOM', 'sell', 1_000_000, 97.25]]
# currency_columns = ['Валюта', 'Направление сделки', 'Объем валюты', 'Цена']
# currency = pd.DataFrame(currency_values, columns=currency_columns)



# currency_buy = currency.rename({'Направление сделки': 'direction'}, axis=1).query('direction == "buy"')
# currency_sell = currency.rename({'Направление сделки': 'direction'}, axis=1).query('direction == "sell"')

# total_buy = currency_buy['Объем валюты'].sum()
# total_sell = currency_sell['Объем валюты'].sum()
# wa_buy = ((currency_buy['Объем валюты'] * currency_buy['Цена']).sum() / currency_buy['Объем валюты'].sum()).round(4)
# wa_sell = ((currency_sell['Объем валюты'] * currency_sell['Цена']).sum() / currency_sell['Объем валюты'].sum()).round(4)
# print(f'Куплено {total_buy} USDRUB_TOM по курсу {wa_buy}')
# print(f'Продано {total_sell} USDRUB_TOM по курсу {wa_sell}')

# --------------------------------------------------------------------

# cpi_russia = [['январь', 106.2, 345.3, 125.8, 117.9, 117.77, 104.11, 102.34,
#         101.51, 108.38, 102.33, 102.76, 103.09, 102.4, 101.75, 102.62,
#         102.43, 101.68, 102.31, 102.37, 101.64, 102.37, 100.5, 100.97,
#         100.59, 103.85, 100.96, 100.62, 100.31, 101.01, 100.4, 100.67,
#         100.99],
#        ['февраль', 104.8, 138.0, 124.7, 110.82, 111.02, 102.79, 101.54,
#         100.89, 104.13, 101.04, 102.28, 101.16, 101.63, 100.99, 101.23,
#         101.66, 101.11, 101.2, 101.65, 100.86, 100.78, 100.37, 100.56,
#         100.7, 102.22, 100.63, 100.22, 100.21, 100.44, 100.33, 100.78,
#         101.17],
#        ['март', 106.3, 129.9, 120.1, 107.41, 108.94, 102.8, 101.43,
#         100.64, 102.79, 100.64, 101.86, 101.08, 101.05, 100.75, 101.34,
#         100.82, 100.59, 101.2, 101.31, 100.63, 100.62, 100.58, 100.34,
#         101.02, 101.21, 100.46, 100.13, 100.29, 100.32, 100.55, 100.66,
#         107.61],
#        ['апрель', 163.5, 121.7, 118.7, 108.49, 108.47, 102.16, 100.96,
#         100.38, 103.03, 100.89, 101.79, 101.16, 101.02, 100.99, 101.12,
#         100.35, 100.57, 101.42, 100.69, 100.29, 100.43, 100.31, 100.51,
#         100.9, 100.46, 100.44, 100.33, 100.38, 100.29, 100.83, 100.58,
#         101.56],
#        ['май', 103.0, 111.9, 118.1, 106.91, 107.93, 101.6, 100.94, 100.5,
#         102.22, 101.75, 101.78, 101.69, 100.8, 100.74, 100.8, 100.48,
#         100.63, 101.35, 100.57, 100.5, 100.48, 100.52, 100.66, 100.9,
#         100.35, 100.41, 100.37, 100.38, 100.34, 100.27, 100.74, 100.12],
#        ['июнь', 101.2, 119.1, 119.9, 106.0, 106.66, 101.17, 101.1,
#         100.08, 101.91, 102.55, 101.62, 100.53, 100.8, 100.78, 100.64,
#         100.28, 100.95, 100.97, 100.6, 100.39, 100.23, 100.89, 100.42,
#         100.62, 100.19, 100.36, 100.61, 100.49, 100.04, 100.22, 100.69,
#         99.65],
#        ['июль', 100.6, 110.6, 122.39, 105.33, 105.38, 100.72, 100.93,
#         100.17, 102.82, 101.79, 100.45, 100.72, 100.71, 100.92, 100.46,
#         100.67, 100.87, 100.51, 100.63, 100.36, 99.99, 101.23, 100.82,
#         100.49, 100.8, 100.54, 100.07, 100.27, 100.2, 100.35, 100.31,
#         99.61],
#        ['август', 100.5, 108.6, 126.0, 104.62, 104.56, 99.79, 99.86,
#         103.67, 101.16, 100.98, 100.01, 100.09, 99.59, 100.42, 99.86,
#         100.19, 100.09, 100.36, 100.0, 100.55, 99.76, 100.1, 100.14,
#         100.24, 100.35, 100.01, 99.46, 100.01, 99.76, 99.96, 100.17,
#         99.48],
#        ['сентябрь', 101.1, 111.5, 123.0, 107.96, 104.46, 100.33, 99.7,
#         138.43, 101.48, 101.32, 100.6, 100.4, 100.34, 100.43, 100.25,
#         100.09, 100.79, 100.8, 99.97, 100.84, 99.96, 100.55, 100.21,
#         100.65, 100.57, 100.17, 99.85, 100.16, 99.84, 99.93, 100.6,
#         100.05],
#        ['октябрь', 103.5, 122.9, 119.5, 115.0, 104.72, 101.2, 100.17,
#         104.54, 101.37, 102.11, 101.09, 101.07, 101.0, 101.14, 100.55,
#         100.28, 101.64, 100.91, 100.0, 100.5, 100.48, 100.46, 100.57,
#         100.82, 100.74, 100.43, 100.2, 100.35, 100.13, 100.43, 101.11,
#         100.18],
#        ['ноябрь', 108.9, 126.1, 116.39, 114.61, 104.56, 101.88, 100.61,
#         105.67, 101.23, 101.52, 101.36, 101.61, 100.96, 101.11, 100.74,
#         100.63, 101.23, 100.83, 100.29, 100.81, 100.42, 100.34, 100.56,
#         101.28, 100.75, 100.44, 100.22, 100.5, 100.28, 100.71, 100.96,
#         100.37],
#        ['декабрь', 112.1, 125.2, 112.5, 116.44, 103.2, 101.42, 100.96,
#         111.61, 101.26, 101.64, 101.6, 101.54, 101.1, 101.14, 100.82,
#         100.79, 101.13, 100.69, 100.41, 101.08, 100.44, 100.54, 100.51,
#         102.62, 100.77, 100.4, 100.42, 100.84, 100.36, 100.83, 100.82,
#         100.78]]
# col = ['месяц', '1991', '1992', '1993', '1994', '1995', '1996', '1997', '1998',
#        '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007',
#        '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016',
#        '2017', '2018', '2019', '2020', '2021', '2022']
# cpi_russia = pd.DataFrame(cpi_russia, columns=col)
# # Продолжите написание кода здесь

# print(cpi_russia
#        .set_index('месяц')
#        .T
#        .assign(итого = lambda x: ((x/100).prod(axis=1) * 100).round(2))
#        .loc['2010':'2022']
#        ['итого']
# )
# print()
# print(pd.DataFrame(cpi_russia
#        .set_index('месяц')
#        .T
#        .assign(итого = lambda x: ((x/100).prod(axis=1) * 100).round(2))
#        .loc['2010':'2022',:]
#        ['итого']
# ))

# ------------------------------------------------------------------
# data = [[1,15732.5,15852.14,14877.63,14935.9,23621810000],
# [2,14751.78,15319.03,14530.23,14893.75,22722460000],
# [3,14681.83,14740.54,13764.24,13768.92,20699010000],
# [4,13481.5,14002.65,13094.65,13770.57,27938600000],
# [5,13812.19,14504.82,13767.71,14098.01,22917570000],
# [6,14118.79,14509.56,13733.16,13791.15,23742060000],
# [7,13768.97,14163.73,13465.56,13548.07,21783060000],
# [8,13424.36,13696.86,12587.88,13694.62,20297420000],
# [9,13570.83,13837.59,13224.98,13313.44,27742350000],
# [10,13328.36,13353.28,12670.08,12843.81,28635340000],
# [11,12795.12,13899.28,12555.35,13893.84,31630400000],
# [12,13860.39,14218.76,13682.55,14169.3,26877890000],
# [13,14177.21,14646.9,14101.34,14261.5,27126270000],
# [14,14304.35,14534.38,13689.23,13711.0,24148400000],
# [15,13547.29,13685.95,13317.74,13351.08,19490360000],
# [16,13319.39,13710.7,12828.02,12839.29,23315200000],
# [17,12749.17,13011.45,12315.74,12334.64,24624260000],
# [18,12331.69,12985.01,11990.15,12144.66,25596970000],
# [19,11923.03,11990.61,11108.76,11805.0,30883260000],
# [20,11727.14,11988.43,11035.69,11354.62,25677110000],
# [21,11396.28,12131.66,11092.48,12131.13,23262840000],
# [22,12137.54,12320.12,11901.43,12012.73,19341280000],
# [23,12200.33,12245.4,11328.27,11340.02,24327710000],
# [24,10986.85,11244.26,10565.14,10798.35,29275170000],
# [25,10974.05,11613.23,10938.06,11607.62,25190770000],
# [26,11661.02,11677.49,10850.01,11127.85,26652190000],
# [27,10964.18,11689.7,10911.45,11635.31,19116360000],
# [28,11524.49,11541.1,11005.93,11452.42,21963960000],
# [29,11561.64,12093.02,11322.84,11834.11,25230550000],
# [30,11837.96,12426.26,11533.37,12390.69,23117120000],
# [31,12317.96,12736.19,12260.48,12657.55,25219290000],
# [32,12703.72,13047.19,12438.86,13047.19,26340720000],
# [33,12996.63,13181.09,12674.87,12705.22,24086490000],
# [34,12523.16,12655.84,12141.52,12141.71,20877800000],
# [35,12021.05,12124.87,11546.52,11630.86,22893680000],
# [36,11643.03,12132.67,11471.5,12112.31,17800080000],
# [37,12174.94,12270.19,11316.92,11448.4,26454340000],
# [38,11338.57,11613.57,10732.72,10867.93,22718590000],
# [39,10833.38,11101.5,10572.33,10575.62,22865220000],
# [40,10659.01,11230.44,10577.89,10652.4,22569590000],
# [41,10659.95,10766.69,10088.83,10321.39,22512590000],
# [42,10575.65,10972.97,10542.43,10859.72,23776090000],
# [43,10867.07,11210.38,10713.33,11102.45,24680370000],
# [44,11028.43,11156.35,10262.93,10475.25,25423620000],
# [45,10516.94,11352.43,10344.01,11323.33,26869400000],
# [46,11233.9,11492.62,11006.21,11146.06,23736340000],
# [47,11091.01,11310.82,10975.66,11226.36,14779100000],
# [48,11147.57,11546.77,10944.37,11461.5,25198780000],
# [49,11380.99,11425.51,10910.62,11004.62,22186460000],
# [50,11015.48,11571.64,10642.1,10705.41,29946270000],
# [51,10707.44,10753.57,10313.32,10497.86,22410180000],
# [52,10462.19,10502.08,10207.47,10466.48,15783390000]]
# col = ['week','open','high','low','close','volume']
# nasdaq_weekly_2022 = pd.DataFrame(data, columns=col)

# print(
#        nasdaq_weekly_2022
#        .query('volume == volume.max()')
# )

# --------------------------------------------------
data = [[1,15732.5,15852.14,14877.63,14935.9,23621810000],
[2,14751.78,15319.03,14530.23,14893.75,22722460000],
[3,14681.83,14740.54,13764.24,13768.92,20699010000],
[4,13481.5,14002.65,13094.65,13770.57,27938600000],
[5,13812.19,14504.82,13767.71,14098.01,22917570000],
[6,14118.79,14509.56,13733.16,13791.15,23742060000],
[7,13768.97,14163.73,13465.56,13548.07,21783060000],
[8,13424.36,13696.86,12587.88,13694.62,20297420000],
[9,13570.83,13837.59,13224.98,13313.44,27742350000],
[10,13328.36,13353.28,12670.08,12843.81,28635340000],
[11,12795.12,13899.28,12555.35,13893.84,31630400000],
[12,13860.39,14218.76,13682.55,14169.3,26877890000],
[13,14177.21,14646.9,14101.34,14261.5,27126270000],
[14,14304.35,14534.38,13689.23,13711.0,24148400000],
[15,13547.29,13685.95,13317.74,13351.08,19490360000],
[16,13319.39,13710.7,12828.02,12839.29,23315200000],
[17,12749.17,13011.45,12315.74,12334.64,24624260000],
[18,12331.69,12985.01,11990.15,12144.66,25596970000],
[19,11923.03,11990.61,11108.76,11805.0,30883260000],
[20,11727.14,11988.43,11035.69,11354.62,25677110000],
[21,11396.28,12131.66,11092.48,12131.13,23262840000],
[22,12137.54,12320.12,11901.43,12012.73,19341280000],
[23,12200.33,12245.4,11328.27,11340.02,24327710000],
[24,10986.85,11244.26,10565.14,10798.35,29275170000],
[25,10974.05,11613.23,10938.06,11607.62,25190770000],
[26,11661.02,11677.49,10850.01,11127.85,26652190000],
[27,10964.18,11689.7,10911.45,11635.31,19116360000],
[28,11524.49,11541.1,11005.93,11452.42,21963960000],
[29,11561.64,12093.02,11322.84,11834.11,25230550000],
[30,11837.96,12426.26,11533.37,12390.69,23117120000],
[31,12317.96,12736.19,12260.48,12657.55,25219290000],
[32,12703.72,13047.19,12438.86,13047.19,26340720000],
[33,12996.63,13181.09,12674.87,12705.22,24086490000],
[34,12523.16,12655.84,12141.52,12141.71,20877800000],
[35,12021.05,12124.87,11546.52,11630.86,22893680000],
[36,11643.03,12132.67,11471.5,12112.31,17800080000],
[37,12174.94,12270.19,11316.92,11448.4,26454340000],
[38,11338.57,11613.57,10732.72,10867.93,22718590000],
[39,10833.38,11101.5,10572.33,10575.62,22865220000],
[40,10659.01,11230.44,10577.89,10652.4,22569590000],
[41,10659.95,10766.69,10088.83,10321.39,22512590000],
[42,10575.65,10972.97,10542.43,10859.72,23776090000],
[43,10867.07,11210.38,10713.33,11102.45,24680370000],
[44,11028.43,11156.35,10262.93,10475.25,25423620000],
[45,10516.94,11352.43,10344.01,11323.33,26869400000],
[46,11233.9,11492.62,11006.21,11146.06,23736340000],
[47,11091.01,11310.82,10975.66,11226.36,14779100000],
[48,11147.57,11546.77,10944.37,11461.5,25198780000],
[49,11380.99,11425.51,10910.62,11004.62,22186460000],
[50,11015.48,11571.64,10642.1,10705.41,29946270000],
[51,10707.44,10753.57,10313.32,10497.86,22410180000],
[52,10462.19,10502.08,10207.47,10466.48,15783390000]]
col = ['week','open','high','low','close','volume']
nasdaq_weekly_2022 = pd.DataFrame(data, columns=col)

nasdaq_mod = (nasdaq_weekly_2022
       .assign(spread_close_open = lambda x: (x['close'] - x['open']).round(2), spread_high_low = lambda x: (x['high'] - x['low']).round(2))
)
print(nasdaq_mod.loc[0:4, ['week',  'spread_close_open',  'spread_high_low']])       
print()
print(nasdaq_mod.loc[[nasdaq_mod['spread_close_open'].idxmin(), nasdaq_mod['spread_close_open'].idxmax(), (nasdaq_mod['spread_close_open']).abs().idxmin()], ['week',  'spread_close_open']])
print()
print(nasdaq_mod.loc[[nasdaq_mod['spread_high_low'].idxmax(), nasdaq_mod['spread_high_low'].idxmin()], ['week',  'spread_high_low']])